// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	vpc "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/vpc/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
)

func DataSourceTencentCloudEipNetworkAccountType() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudEipNetworkAccountTypeRead,
		Schema: map[string]*schema.Schema{
			"network_account_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The network type of the user account, STANDARD is a standard user, LEGACY is a traditional user.",
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudEipNetworkAccountTypeRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_eip_network_account_type.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	var respData *vpc.DescribeNetworkAccountTypeResponseParams
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeEipNetworkAccountTypeByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var networkAccountType string
	if respData.NetworkAccountType != nil {
		_ = d.Set("network_account_type", respData.NetworkAccountType)
		networkAccountType = *respData.NetworkAccountType
	}

	d.SetId(networkAccountType)

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataSourceTencentCloudEipNetworkAccountTypeReadOutputContent(ctx)); e != nil {
			return e
		}
	}

	return nil
}
