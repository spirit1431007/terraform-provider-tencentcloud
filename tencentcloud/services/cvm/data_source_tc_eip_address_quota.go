// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	vpc "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/vpc/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudEipAddressQuota() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudEipAddressQuotaRead,
		Schema: map[string]*schema.Schema{
			"quota_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "The specified account EIP quota information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"quota_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Quota name: TOTAL_EIP_QUOTA,DAILY_EIP_APPLY,DAILY_PUBLIC_IP_ASSIGN.",
						},
						"quota_current": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Current count.",
						},
						"quota_limit": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "quota count.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudEipAddressQuotaRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_eip_address_quota.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	var respData []*vpc.Quota
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeEipAddressQuotaByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var ids []string
	quotaSetList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, quotaSet := range respData {
			quotaSetMap := map[string]interface{}{}

			var quotaId string
			if quotaSet.QuotaId != nil {
				quotaSetMap["quota_id"] = quotaSet.QuotaId
				quotaId = *quotaSet.QuotaId
			}

			if quotaSet.QuotaCurrent != nil {
				quotaSetMap["quota_current"] = quotaSet.QuotaCurrent
			}

			if quotaSet.QuotaLimit != nil {
				quotaSetMap["quota_limit"] = quotaSet.QuotaLimit
			}

			ids = append(ids, quotaId)
			quotaSetList = append(quotaSetList, quotaSetMap)
		}

		_ = d.Set("quota_set", quotaSetList)
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), quotaSetList); e != nil {
			return e
		}
	}

	return nil
}
