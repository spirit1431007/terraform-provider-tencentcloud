// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudCvmInstancesModification() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudCvmInstancesModificationRead,
		Schema: map[string]*schema.Schema{
			"instance_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "One or more instance ID to be queried. It can be obtained from the InstanceId in the returned value of API DescribeInstances. The maximum number of instances in batch for each request is 20.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"filters": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "The upper limit of Filters for each request is 10 and the upper limit for Filter.Values is 2.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Fields to be filtered.",
						},
						"values": {
							Type:        schema.TypeSet,
							Required:    true,
							Description: "Value of the field.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"instance_type_config_status_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "The list of model configurations that can be adjusted by the instance.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "State description.",
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Status description information.",
						},
						"instance_type_config": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "Configuration information.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"zone": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "Availability zone.",
									},
									"instance_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "Instance type.",
									},
									"instance_family": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "Instance family.",
									},
									"gpu": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: "The number of GPU kernels, in cores.",
									},
									"cpu": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: "The number of CPU kernels, in cores.",
									},
									"memory": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: "Memory capacity (in GB).",
									},
									"fpga": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: "The number of FPGA kernels, in cores.",
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudCvmInstancesModificationRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_cvm_instances_modification.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("instance_ids"); ok {
		instanceIdsList := []*string{}
		instanceIdsSet := v.(*schema.Set).List()
		for i := range instanceIdsSet {
			instanceIds := instanceIdsSet[i].(string)
			instanceIdsList = append(instanceIdsList, helper.String(instanceIds))
		}
		paramMap["InstanceIds"] = instanceIdsList
	}

	if v, ok := d.GetOk("filters"); ok {
		filtersSet := v.([]interface{})
		tmpSet := make([]*cvm.Filter, 0, len(filtersSet))
		for _, item := range filtersSet {
			filtersMap := item.(map[string]interface{})
			filter := cvm.Filter{}
			if v, ok := filtersMap["name"]; ok {
				filter.Name = helper.String(v.(string))
			}
			if v, ok := filtersMap["values"]; ok {
				valuesSet := v.(*schema.Set).List()
				for i := range valuesSet {
					values := valuesSet[i].(string)
					filter.Values = append(filter.Values, helper.String(values))
				}
			}
			tmpSet = append(tmpSet, &filter)
		}
		paramMap["Filters"] = tmpSet
	}

	var respData []*cvm.InstanceTypeConfigStatus
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeCvmInstancesModificationByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var ids []string
	instanceTypeConfigStatusSetList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, instanceTypeConfigStatusSet := range respData {
			instanceTypeConfigStatusSetMap := map[string]interface{}{}

			var instanceType string
			if instanceTypeConfigStatusSet.Status != nil {
				instanceTypeConfigStatusSetMap["status"] = instanceTypeConfigStatusSet.Status
			}

			if instanceTypeConfigStatusSet.Message != nil {
				instanceTypeConfigStatusSetMap["message"] = instanceTypeConfigStatusSet.Message
			}

			instanceTypeConfigMap := map[string]interface{}{}

			if instanceTypeConfigStatusSet.InstanceTypeConfig != nil {
				if instanceTypeConfigStatusSet.InstanceTypeConfig.Zone != nil {
					instanceTypeConfigMap["zone"] = instanceTypeConfigStatusSet.InstanceTypeConfig.Zone
				}

				if instanceTypeConfigStatusSet.InstanceTypeConfig.InstanceType != nil {
					instanceTypeConfigMap["instance_type"] = instanceTypeConfigStatusSet.InstanceTypeConfig.InstanceType
					instanceType = *instanceTypeConfigStatusSet.InstanceTypeConfig.InstanceType
				}

				if instanceTypeConfigStatusSet.InstanceTypeConfig.InstanceFamily != nil {
					instanceTypeConfigMap["instance_family"] = instanceTypeConfigStatusSet.InstanceTypeConfig.InstanceFamily
				}

				if instanceTypeConfigStatusSet.InstanceTypeConfig.GPU != nil {
					instanceTypeConfigMap["gpu"] = instanceTypeConfigStatusSet.InstanceTypeConfig.GPU
				}

				if instanceTypeConfigStatusSet.InstanceTypeConfig.CPU != nil {
					instanceTypeConfigMap["cpu"] = instanceTypeConfigStatusSet.InstanceTypeConfig.CPU
				}

				if instanceTypeConfigStatusSet.InstanceTypeConfig.Memory != nil {
					instanceTypeConfigMap["memory"] = instanceTypeConfigStatusSet.InstanceTypeConfig.Memory
				}

				if instanceTypeConfigStatusSet.InstanceTypeConfig.FPGA != nil {
					instanceTypeConfigMap["fpga"] = instanceTypeConfigStatusSet.InstanceTypeConfig.FPGA
				}

				instanceTypeConfigStatusSetMap["instance_type_config"] = []interface{}{instanceTypeConfigMap}
			}

			ids = append(ids, instanceType)
			instanceTypeConfigStatusSetList = append(instanceTypeConfigStatusSetList, instanceTypeConfigStatusSetMap)
		}

		_ = d.Set("instance_type_config_status_list", instanceTypeConfigStatusSetList)
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), instanceTypeConfigStatusSetList); e != nil {
			return e
		}
	}

	return nil
}
