// Code generated by iacg; DO NOT EDIT.
package teo

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	teov20220901 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/teo/v20220901"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudTeoSecurityIpGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudTeoSecurityIpGroupCreate,
		Read:   resourceTencentCloudTeoSecurityIpGroupRead,
		Update: resourceTencentCloudTeoSecurityIpGroupUpdate,
		Delete: resourceTencentCloudTeoSecurityIpGroupDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"zone_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Site ID.",
			},

			"ip_group": {
				Type:        schema.TypeList,
				Required:    true,
				MaxItems:    1,
				Description: "IP group information, replace all when modifying.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"group_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Group ID.",
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Group name.",
						},
						"content": {
							Type:        schema.TypeSet,
							Required:    true,
							Description: "IP group content. Only supports IP and IP mask.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},
		},
	}
}

func resourceTencentCloudTeoSecurityIpGroupCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_security_ip_group.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		zoneId  string
		groupId int64
	)
	var (
		request  = teov20220901.NewCreateSecurityIPGroupRequest()
		response = teov20220901.NewCreateSecurityIPGroupResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}

	request.ZoneId = helper.String(zoneId)

	if iPGroupMap, ok := helper.InterfacesHeadMap(d, "ip_group"); ok {
		iPGroup := teov20220901.IPGroup{}
		if v, ok := iPGroupMap["group_id"]; ok {
			iPGroup.GroupId = helper.IntInt64(v.(int))
		}
		if v, ok := iPGroupMap["name"]; ok {
			iPGroup.Name = helper.String(v.(string))
		}
		if v, ok := iPGroupMap["content"]; ok {
			contentSet := v.(*schema.Set).List()
			for i := range contentSet {
				content := contentSet[i].(string)
				iPGroup.Content = append(iPGroup.Content, helper.String(content))
			}
		}
		request.IPGroup = &iPGroup
	}

	if err := resourceTencentCloudTeoSecurityIpGroupCreatePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoV20220901Client().CreateSecurityIPGroupWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo security ip group failed, reason:%+v", logId, err)
		return err
	}

	groupId = *response.Response.GroupId

	d.SetId(strings.Join([]string{zoneId, helper.Int64ToStr(groupId)}, tccommon.FILED_SP))

	return resourceTencentCloudTeoSecurityIpGroupRead(d, meta)
}

func resourceTencentCloudTeoSecurityIpGroupRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_security_ip_group.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TeoService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	groupId := idSplit[1]

	_ = d.Set("zone_id", zoneId)

	respData, err := service.DescribeTeoSecurityIpGroupById(ctx, zoneId, groupId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `teo_security_ip_group` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	iPGroupsList := make([]map[string]interface{}, 0, len(respData.IPGroups))
	if respData.IPGroups != nil {
		for _, iPGroups := range respData.IPGroups {
			iPGroupsMap := map[string]interface{}{}

			if iPGroups.GroupId != nil {
				iPGroupsMap["group_id"] = iPGroups.GroupId
			}

			if iPGroups.Name != nil {
				iPGroupsMap["name"] = iPGroups.Name
			}

			if iPGroups.Content != nil {
				iPGroupsMap["content"] = iPGroups.Content
			}

			iPGroupsList = append(iPGroupsList, iPGroupsMap)
		}

		_ = d.Set("ip_group", iPGroupsList)
	}

	return nil
}

func resourceTencentCloudTeoSecurityIpGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_security_ip_group.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"zone_id"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	groupId := idSplit[1]

	needChange := false
	mutableArgs := []string{"ip_group"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := teov20220901.NewModifySecurityIPGroupRequest()

		request.ZoneId = helper.String(zoneId)

		if iPGroupMap, ok := helper.InterfacesHeadMap(d, "ip_group"); ok {
			iPGroup := teov20220901.IPGroup{}
			iPGroup.GroupId = helper.StrToInt64Point(groupId)
			if v, ok := iPGroupMap["name"]; ok {
				iPGroup.Name = helper.String(v.(string))
			}
			if v, ok := iPGroupMap["content"]; ok {
				contentSet := v.(*schema.Set).List()
				for i := range contentSet {
					content := contentSet[i].(string)
					iPGroup.Content = append(iPGroup.Content, helper.String(content))
				}
			}
			request.IPGroup = &iPGroup
		}

		if err := resourceTencentCloudTeoSecurityIpGroupUpdatePostFillRequest0(ctx, request); err != nil {
			return err
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoV20220901Client().ModifySecurityIPGroupWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update teo security ip group failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudTeoSecurityIpGroupRead(d, meta)
}

func resourceTencentCloudTeoSecurityIpGroupDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_security_ip_group.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	groupId := idSplit[1]

	var (
		request  = teov20220901.NewDeleteSecurityIPGroupRequest()
		response = teov20220901.NewDeleteSecurityIPGroupResponse()
	)

	request.ZoneId = helper.String(zoneId)

	request.GroupId = helper.StrToInt64Point(groupId)

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoV20220901Client().DeleteSecurityIPGroupWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete teo security ip group failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	return nil
}
