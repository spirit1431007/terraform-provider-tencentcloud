// Code generated by iacg; DO NOT EDIT.
package teo

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	teov20220901 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/teo/v20220901"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudTeoFunctionRuntimeEnvironment() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudTeoFunctionRuntimeEnvironmentCreate,
		Read:   resourceTencentCloudTeoFunctionRuntimeEnvironmentRead,
		Update: resourceTencentCloudTeoFunctionRuntimeEnvironmentUpdate,
		Delete: resourceTencentCloudTeoFunctionRuntimeEnvironmentDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"zone_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "ID of the site.",
			},

			"function_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "ID of the Function.",
			},

			"environment_variables": {
				Type:        schema.TypeList,
				Required:    true,
				Description: "The environment variable list.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"key": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The name of the variable, which is limited to alphanumeric characters and the special characters `@`, `.`, `-`, and `_`. It can have a maximum of 64 bytes and should not be duplicated.",
						},
						"value": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The value of the variable, which is limited to a maximum of 5000 bytes. The default value is empty.",
						},
						"type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The type of the variable can have the following values:  - `string`: Represents a string type.  - `json`: Represents a JSON object type.",
						},
					},
				},
			},
		},
	}
}

func resourceTencentCloudTeoFunctionRuntimeEnvironmentCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_function_runtime_environment.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		zoneId     string
		functionId string
	)
	var (
		request  = teov20220901.NewHandleFunctionRuntimeEnvironmentRequest()
		response = teov20220901.NewHandleFunctionRuntimeEnvironmentResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}
	if v, ok := d.GetOk("function_id"); ok {
		functionId = v.(string)
	}

	request.ZoneId = helper.String(zoneId)

	request.FunctionId = helper.String(functionId)

	if v, ok := d.GetOk("environment_variables"); ok {
		for _, item := range v.([]interface{}) {
			environmentVariablesMap := item.(map[string]interface{})
			functionEnvironmentVariable := teov20220901.FunctionEnvironmentVariable{}
			if v, ok := environmentVariablesMap["key"]; ok {
				functionEnvironmentVariable.Key = helper.String(v.(string))
			}
			if v, ok := environmentVariablesMap["value"]; ok {
				functionEnvironmentVariable.Value = helper.String(v.(string))
			}
			if v, ok := environmentVariablesMap["type"]; ok {
				functionEnvironmentVariable.Type = helper.String(v.(string))
			}
			request.EnvironmentVariables = append(request.EnvironmentVariables, &functionEnvironmentVariable)
		}
	}

	if err := resourceTencentCloudTeoFunctionRuntimeEnvironmentCreatePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoV20220901Client().HandleFunctionRuntimeEnvironmentWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo function runtime environment failed, reason:%+v", logId, err)
		return err
	}

	_ = response

	d.SetId(strings.Join([]string{zoneId, functionId}, tccommon.FILED_SP))

	return resourceTencentCloudTeoFunctionRuntimeEnvironmentRead(d, meta)
}

func resourceTencentCloudTeoFunctionRuntimeEnvironmentRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_function_runtime_environment.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TeoService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	functionId := idSplit[1]

	_ = d.Set("zone_id", zoneId)

	_ = d.Set("function_id", functionId)

	respData, err := service.DescribeTeoFunctionRuntimeEnvironmentById(ctx, zoneId, functionId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `teo_function_runtime_environment` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	environmentVariablesList := make([]map[string]interface{}, 0, len(respData.EnvironmentVariables))
	if respData.EnvironmentVariables != nil {
		for _, environmentVariables := range respData.EnvironmentVariables {
			environmentVariablesMap := map[string]interface{}{}

			if environmentVariables.Key != nil {
				environmentVariablesMap["key"] = environmentVariables.Key
			}

			if environmentVariables.Value != nil {
				environmentVariablesMap["value"] = environmentVariables.Value
			}

			if environmentVariables.Type != nil {
				environmentVariablesMap["type"] = environmentVariables.Type
			}

			environmentVariablesList = append(environmentVariablesList, environmentVariablesMap)
		}

		_ = d.Set("environment_variables", environmentVariablesList)
	}

	return nil
}

func resourceTencentCloudTeoFunctionRuntimeEnvironmentUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_function_runtime_environment.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	functionId := idSplit[1]

	needChange := false
	mutableArgs := []string{"environment_variables"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := teov20220901.NewHandleFunctionRuntimeEnvironmentRequest()

		request.ZoneId = helper.String(zoneId)

		request.FunctionId = helper.String(functionId)

		if v, ok := d.GetOk("environment_variables"); ok {
			for _, item := range v.([]interface{}) {
				environmentVariablesMap := item.(map[string]interface{})
				functionEnvironmentVariable := teov20220901.FunctionEnvironmentVariable{}
				if v, ok := environmentVariablesMap["key"]; ok {
					functionEnvironmentVariable.Key = helper.String(v.(string))
				}
				if v, ok := environmentVariablesMap["value"]; ok {
					functionEnvironmentVariable.Value = helper.String(v.(string))
				}
				if v, ok := environmentVariablesMap["type"]; ok {
					functionEnvironmentVariable.Type = helper.String(v.(string))
				}
				request.EnvironmentVariables = append(request.EnvironmentVariables, &functionEnvironmentVariable)
			}
		}

		if err := resourceTencentCloudTeoFunctionRuntimeEnvironmentUpdatePostFillRequest0(ctx, request); err != nil {
			return err
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoV20220901Client().HandleFunctionRuntimeEnvironmentWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update teo function runtime environment failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudTeoFunctionRuntimeEnvironmentRead(d, meta)
}

func resourceTencentCloudTeoFunctionRuntimeEnvironmentDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_function_runtime_environment.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	functionId := idSplit[1]

	var (
		request  = teov20220901.NewHandleFunctionRuntimeEnvironmentRequest()
		response = teov20220901.NewHandleFunctionRuntimeEnvironmentResponse()
	)

	request.ZoneId = helper.String(zoneId)

	request.FunctionId = helper.String(functionId)

	if v, ok := d.GetOk("environment_variables"); ok {
		for _, item := range v.([]interface{}) {
			environmentVariablesMap := item.(map[string]interface{})
			functionEnvironmentVariable := teov20220901.FunctionEnvironmentVariable{}
			if v, ok := environmentVariablesMap["key"]; ok {
				functionEnvironmentVariable.Key = helper.String(v.(string))
			}
			if v, ok := environmentVariablesMap["value"]; ok {
				functionEnvironmentVariable.Value = helper.String(v.(string))
			}
			if v, ok := environmentVariablesMap["type"]; ok {
				functionEnvironmentVariable.Type = helper.String(v.(string))
			}
			request.EnvironmentVariables = append(request.EnvironmentVariables, &functionEnvironmentVariable)
		}
	}

	if err := resourceTencentCloudTeoFunctionRuntimeEnvironmentDeletePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoV20220901Client().HandleFunctionRuntimeEnvironmentWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete teo function runtime environment failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	return nil
}
